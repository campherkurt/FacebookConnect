// Generated by CoffeeScript 1.6.3
/*
  FacebookConnect: Facebook SDK helper class
  http://stephan.steynfaardt.com

  Copyright (c) 2013 Stephan Steynfaardt
  Released under the MIT license
  http://opensource.org/licenses/MIT
*/


(function() {
  "use strict";
  var __slice = [].slice;

  (function(window, undefined_) {
    var FacebookConnect, authChangeCallback, authErrorCallback, authResponse, authStatus, debug, errorCallback, extend, fbReady, fbScope, fb_settings, fbreadyCallback, getMetaTags, isFunction, updateAuthStatus;
    fb_settings = {
      appId: '',
      channelUrl: '',
      status: false,
      cookie: true,
      xfbml: false,
      frictionlessRequests: true,
      scope: null
    };
    fbreadyCallback = [];
    authResponse = {};
    authStatus = 'unknown';
    fbReady = false;
    fbScope = '';
    debug = false;
    errorCallback = function() {};
    authErrorCallback = function() {};
    authChangeCallback = function() {};
    extend = function() {
      var key, object, objects, origional, value, _i, _len;
      origional = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        object = objects[_i];
        for (key in object) {
          value = object[key];
          origional[key] = value;
        }
      }
      return origional;
    };
    updateAuthStatus = function(response) {
      var err;
      if (authStatus !== response.status) {
        try {
          authStatus = response.status;
          authChangeCallback(response);
          FacebookConnect.log("authStatus changed to " + authStatus);
        } catch (_error) {
          err = _error;
          FacebookConnect.log("[error] updateAuthStatus: " + err.message);
          if (response['error']) {
            errorCallback(response);
          }
        }
      }
      return authResponse = response;
    };
    isFunction = function(func) {
      return typeof func === "function";
    };
    getMetaTags = function() {
      var i, metaTags, ogMeta, property;
      metaTags = document.getElementsByTagName("meta");
      i = 0;
      ogMeta = {};
      while (i < metaTags.length) {
        property = metaTags[i].getAttribute("property");
        if (property && property.indexOf("og:") === 0) {
          ogMeta[property.substring(3)] = metaTags[i].getAttribute("content");
        }
        i++;
      }
      return ogMeta;
    };
    FacebookConnect = (function() {
      function FacebookConnect(settings, callback) {
        var _this;
        if (settings == null) {
          settings = {};
        }
        if (callback == null) {
          callback = null;
        }
        fb_settings = extend(fb_settings, settings);
        if (typeof fb_settings.scope === 'string') {
          this.setScope(fb_settings.scope);
        } else {
          delete fb_settings.scope;
        }
        _this = this;
        (function(d) {
          var id, js;
          js = void 0;
          id = "facebook-jssdk";
          if (d.getElementById(id)) {
            return;
          }
          js = d.createElement("script");
          js.id = id;
          js.async = true;
          js.src = "//connect.facebook.net/en_US/all.js";
          return d.getElementsByTagName("head")[0].appendChild(js);
        })(document);
        window.fbAsyncInit = function() {
          var err, fbCallParam, _i, _len;
          FB.init(fb_settings);
          FB.Event.subscribe("auth.statusChange", function(response) {
            return updateAuthStatus(response);
          });
          fbReady = true;
          FacebookConnect.log('FB object is ready');
          try {
            for (_i = 0, _len = fbreadyCallback.length; _i < _len; _i++) {
              fbCallParam = fbreadyCallback[_i];
              _this.api(fbCallParam[0], fbCallParam[1]);
            }
          } catch (_error) {
            err = _error;
            FacebookConnect.log("[error] fbreadyCallback: " + err.message);
          } finally {
            fbreadyCallback = [];
          }
          if (isFunction(callback)) {
            return callback();
          }
        };
      }

      FacebookConnect.prototype.isFbReady = function() {
        return fbReady;
      };

      FacebookConnect.prototype.api = function(url, callback) {
        var errorCheckCallback, _this;
        if (fbReady === false) {
          fbreadyCallback.push([url, callback]);
          return this;
        }
        errorCheckCallback = function(res) {
          if (typeof res["error"] !== "undefined") {
            FacebookConnect.log("[error] API returned an error: " + res.error.message);
            return errorCallback(res);
          } else {
            return callback(res);
          }
        };
        _this = this;
        this.getLoginStatus(function(response) {
          if (authStatus === 'connected') {
            return FB.api(url, errorCheckCallback);
          } else {
            return _this.login(function(loginResponse) {
              return _this.api(url, callback);
            });
          }
        });
        return this;
      };

      FacebookConnect.prototype.getLoginStatus = function(callback, forceCheck) {
        if (forceCheck == null) {
          forceCheck = false;
        }
        if (authStatus !== 'connected' || forceCheck === true) {
          FB.getLoginStatus(function(response) {
            updateAuthStatus(response);
            if (isFunction(callback)) {
              return callback(response);
            }
          }, forceCheck);
        } else {
          if (isFunction(callback)) {
            callback(authResponse);
          }
        }
        return this;
      };

      FacebookConnect.prototype.login = function(callback) {
        FB.login((function(response) {
          if (response.authResponse) {
            if (isFunction(callback)) {
              return callback(response);
            }
          } else {
            authErrorCallback(response);
            return FacebookConnect.log('User cancelled login or did not fully authorize.');
          }
        }), {
          "scope": this.getScopeStr(),
          "auth_type": "https"
        });
        return this;
      };

      FacebookConnect.prototype.logout = function(callback) {
        FB.logout(function(response) {
          if (isFunction(callback)) {
            return callback(response);
          }
        });
        return this;
      };

      FacebookConnect.prototype.share = function(share_settings, callback) {
        var obj, ogMeta, url;
        if (share_settings == null) {
          share_settings = {};
        }
        url = window.location.toString();
        ogMeta = getMetaTags();
        obj = {
          method: "feed",
          redirect_uri: url,
          link: url,
          picture: ogMeta.image || "",
          name: ogMeta.site_name || "",
          caption: ogMeta.caption || ogMeta.site_name || "",
          description: ogMeta.description || ""
        };
        obj = extend(obj, share_settings);
        if (isFunction(callback)) {
          FB.ui(obj, callback);
        } else {
          FB.ui(obj);
        }
        return this;
      };

      FacebookConnect.prototype.message = function(message_settings, callback) {
        var obj, url;
        if (message_settings == null) {
          message_settings = {};
        }
        url = window.location.toString();
        obj = {
          method: "send",
          link: url,
          to: ''
        };
        obj = extend(obj, message_settings);
        if (isFunction(callback)) {
          FB.ui(obj, callback);
        } else {
          FB.ui(obj);
        }
        return this;
      };

      FacebookConnect.prototype.enableDebug = function() {
        debug = true;
        return this;
      };

      FacebookConnect.prototype.disableDebug = function() {
        debug = false;
        return this;
      };

      FacebookConnect.prototype.getSettings = function() {
        return fb_settings;
      };

      FacebookConnect.prototype.getAppId = function() {
        return fb_settings['appId'];
      };

      FacebookConnect.prototype.setScope = function(scope_srt) {
        if (typeof scope_srt === "string") {
          fbScope = {
            "scope": "" + scope_srt
          };
        }
        return this;
      };

      FacebookConnect.prototype.getScope = function() {
        if (fbScope !== "") {
          return fbScope;
        }
        return {
          scope: ""
        };
      };

      FacebookConnect.prototype.getScopeStr = function() {
        if (fbScope === "") {
          return fbScope;
        }
        return fbScope['scope'];
      };

      FacebookConnect.prototype.onError = function(callback) {
        if (isFunction(callback)) {
          errorCallback = callback;
        }
        return this;
      };

      FacebookConnect.prototype.onAuthError = function(callback) {
        if (isFunction(callback)) {
          authErrorCallback = callback;
        }
        return this;
      };

      FacebookConnect.prototype.onAuthChange = function(callback) {
        if (isFunction(callback)) {
          authChangeCallback = callback;
        }
        return this;
      };

      FacebookConnect.log = function(data) {
        if (debug !== true) {
          return;
        }
        if (!(typeof window['console'] === 'undefined' || typeof console['log'] !== "function")) {
          return console.log(data);
        }
      };

      return FacebookConnect;

    })();
    return window.FacebookConnect = FacebookConnect;
  })(window, undefined);

}).call(this);
